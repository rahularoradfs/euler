"""
Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,
where each “_” is a single digit.
"""

# such an integer must be between a where a^2 = 1020304050607080900
# and b where b^2 = 192939495969798990

# find these bounds
import math
a = math.floor((1020304050607080900) ** (1/2))
b = math.ceil((1929394959697989990) ** (1/2))

# since the given number ends with 0, its root must be divisible by 10
# conveniently, a is divisible by 10
# so we can check all numbers in range(a, b, 10)

for c in range(a, b, 10): 
	if str(c**2)[::2] == '1234567890': 
		print(c)
		break

# per forum, further optimizations to be had...
# if we recognize that a square ending in 0 must have a root ending in 10
# hence must actually end in 00
# and that any square ending in 900
# is generated by an integer ending in 30 (-> 900) or 70 (-> 4900)

# it's also ultimaately advantageous to search in the other direction
# (but this would have been hard to predict)
# and the string conversion to check may be slowing us down also
